{"version":3,"sources":["webpack:///angular/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","webpack:///angular/src/app/app-routing.module.ts","webpack:///angular/src/app/app.component.ts","webpack:///angular/src/app/app.component.html","webpack:///angular/src/app/app.module.ts","webpack:///angular/src/app/providers/tab-id.provider.ts","webpack:///angular/src/environments/environment.ts","webpack:///angular/src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","routes","path","loadChildren","m","PopupModule","OptionsModule","AppRoutingModule","RouterModule","useHash","relativeLinkResolution","AppComponent","dbConfig","name","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","options","unique","AppModule","BrowserModule","NgxIndexedDBModule","DialogModule","sizes","sm","width","TAB_ID","InjectionToken","environment","production","chrome","tabs","query","active","currentWindow","enableProdMode","pop","tabId","platformBrowser","provide","useValue","bootstrapModule","error","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 403;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'popup',\n    loadChildren: () => import('./modules/popup/popup.module').then(m => m.PopupModule)\n  },\n  {\n    path: 'options',\n    loadChildren: () => import('./modules/options/options.module').then(m => m.OptionsModule)\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true, relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {}\r\n","<!-- Routing based on the module that opened (popup/options/tab) -->\n<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { DialogModule } from '@ngneat/dialog';\nimport { DBConfig, NgxIndexedDBModule } from 'ngx-indexed-db';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nconst dbConfig: DBConfig = {\n  name: 'boPlanner',\n  version: 2,\n  objectStoresMeta: [{\n    store: 'orders',\n    storeConfig: { keyPath: 'id', autoIncrement: true },\n    storeSchema: [\n      { name: 'itemName', keypath: 'itemName', options: { unique: true } },\n      { name: 'appId', keypath: 'appId', options: { unique: false } },\n      { name: 'currencyId', keypath: 'currencyId', options: { unique: false } },\n      { name: 'price', keypath: 'price', options: { unique: false } },\n      { name: 'amount', keypath: 'amount', options: { unique: false } },\n      { name: 'created', keypath: 'created', options: { unique: false } },\n      { name: 'updated', keypath: 'updated', options: { unique: false } },\n    ]\n  }]\n};\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, NgxIndexedDBModule.forRoot(dbConfig), DialogModule.forRoot({\n    sizes: {\n      sm: {\n        width: 500,\n      },\n    }\n  })],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { InjectionToken } from '@angular/core';\n/**\n * provides the currently opened tab id\n */\nexport const TAB_ID = new InjectionToken<number>('CHROME_TAB_ID');\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { TAB_ID } from './app/providers/tab-id.provider';\n\nchrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n  if (environment.production) {\n    enableProdMode();\n  }\n\n  const { id: tabId } = [...tabs].pop();\n\n  // provides the current Tab ID so you can send messages to the content page\n  platformBrowserDynamic([{ provide: TAB_ID, useValue: tabId }])\n    .bootstrapModule(AppModule)\n    .catch(error => console.error(error));\n});\n"]}