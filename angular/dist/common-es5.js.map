{"version":3,"sources":["webpack:///angular/src/app/modules/options/options.facade.ts","webpack:///angular/src/app/modules/options/options.state.ts"],"names":["OptionsFacade","dbService","optionsState","force","plannedOrders$","value","length","getAll","pipe","first","subscribe","orders","updatePlannedOrders","asObservable","next","currency","currentCurrency","CURRENCY","currencyId","setCurrency","OptionsState","BehaviorSubject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAYaA,c;AAEX,gCACUC,SADV,EAEUC,YAFV,EAEoC;AAAA;;AAD1B,eAAAD,SAAA,GAAAA,SAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACL;AAEL;;;;;;;;;;;;iBAQA,0BAAiBC,KAAjB,EAAgC;AAAA;;;;AAC9B,gBAAIA,KAAK,IAAI,EAAC,WAAKD,YAAL,CAAkBE,cAAlB,CAAiCC,KAAjC,MAAsC,IAAtC,IAAsC,aAAtC,GAAsC,MAAtC,GAAsC,GAAEC,MAAzC,CAAb,EAA8D;AAC5D,mBAAKL,SAAL,CAAeM,MAAf,CAAgC,QAAhC,EACGC,IADH,CAEI,gDAAAC,KAAA,GAFJ,EAIGC,SAJH,CAIa,UAAAC,MAAM;AAAA,uBAAI,KAAI,CAACC,mBAAL,CAAyBD,MAAzB,CAAJ;AAAA,eAJnB;AAKD;;AACD,mBAAO,KAAKT,YAAL,CAAkBE,cAAlB,CAAiCS,YAAjC,EAAP;AACD;AAED;;;;;;;;;iBAMA,6BAAoBF,MAApB,EAAwC;AACtC,iBAAKT,YAAL,CAAkBE,cAAlB,CAAiCU,IAAjC,CAAsCH,MAAtC;AACD;AAED;;;;;;;;;iBAMA,uBAAc;AAAA;;AACZ;AACA,gBAAI,CAAC,KAAKT,YAAL,CAAkBa,QAAvB,EAAiC;AAC/B,kBAAMC,eAAe,GAAG,8CAAAC,QAAA,MAAc,UAAAF,QAAQ,EAAI;AAAD;;AAAC,uBAAAA,QAAQ,CAACG,UAAT,KAAwB,EAAC,YAAI,CAAChB,YAAL,CAAkBE,cAAlB,CAAiCC,KAAjC,CAAuC,CAAvC,OAAyC,IAAzC,IAAyC,aAAzC,GAAyC,MAAzC,GAAyC,GAAEa,UAA5C,CAAxB;AAA8E,eAAxG,CAAxB;;AACA,mBAAKC,WAAL,CAAiBH,eAAjB;AACD;;AACD,mBAAO,KAAKd,YAAL,CAAkBa,QAAzB;AACD;;;iBAEO,qBAAYA,QAAZ,EAAgC;AACtC,iBAAKb,YAAL,CAAkBa,QAAlB,GAA6BA,QAA7B;AACD;;;;;;;yBArDUf,c,EAAa,uH,EAAA,gH;AAAA,O;;;eAAbA,c;AAAa,iBAAbA,cAAa,K;AAAA,oBAFZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCFDoB,a,GAeX,yBAAc;AAAA;;AAdd;;;;;AAKA,aAAAhB,cAAA,GAAiB,IAAI,kCAAAiB,eAAJ,CAAgC,EAAhC,CAAjB;AASiB,O;;;yBAfND,a;AAAY,O;;;eAAZA,a;AAAY,iBAAZA,aAAY,K;AAAA,oBAFX","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NgxIndexedDBService } from 'ngx-indexed-db';\nimport { Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { CURRENCY } from '../../core/currencies';\nimport { Currency } from '../../models/base.model';\nimport { BuyOrder } from '../../models/buy-order.model';\nimport { OptionsState } from './options.state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OptionsFacade {\n\n  constructor(\n    private dbService: NgxIndexedDBService,\n    private optionsState: OptionsState,\n  ) { }\n\n  /**\n   * Method returns `Observable` with stored planned buy orders. If there are no planned orders\n   * then it will look for them in DB, store and return observable with buy orders\n   *\n   * @param {boolean} [force] Indicates if request to DB should be forced instead of using stored values\n   * @return {Observable<BuyOrder[]>} `Observable` with planned buy orders\n   * @memberof OptionsFacade\n   */\n  getPlannedOrders(force?: boolean): Observable<BuyOrder[]> {\n    if (force || !this.optionsState.plannedOrders$.value?.length) {\n      this.dbService.getAll<BuyOrder>('orders')\n        .pipe(\n          first(),\n        )\n        .subscribe(orders => this.updatePlannedOrders(orders));\n    }\n    return this.optionsState.plannedOrders$.asObservable();\n  }\n\n  /**\n   * Updates planned buy orders in state\n   *\n   * @param {BuyOrder[]} orders Orders to store\n   * @memberof OptionsFacade\n   */\n  updatePlannedOrders(orders: BuyOrder[]) {\n    this.optionsState.plannedOrders$.next(orders);\n  }\n\n  /**\n   * Method gets users currency based on first added planned order\n   *\n   * @return {Currency} Returns information about users currency\n   * @memberof OptionsFacade\n   */\n  getCurrency() {\n    // Checking if currency is stored in state. If not then trying to get and set it\n    if (!this.optionsState.currency) {\n      const currentCurrency = CURRENCY.find(currency => currency.currencyId === +this.optionsState.plannedOrders$.value[0]?.currencyId);\n      this.setCurrency(currentCurrency);\n    }\n    return this.optionsState.currency;\n  }\n\n  private setCurrency(currency: Currency) {\n    this.optionsState.currency = currency;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Currency } from '../../models/base.model';\nimport { BuyOrder } from '../../models/buy-order.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OptionsState {\n  /**\n   * Behavior Subject which stores planned orders\n   *\n   * @memberof OptionsState\n   */\n  plannedOrders$ = new BehaviorSubject<BuyOrder[]>([]);\n  /**\n   * Users currency\n   *\n   * @type {Currency}\n   * @memberof OptionsState\n   */\n  currency: Currency;\n\n  constructor() { }\n\n}\n"]}