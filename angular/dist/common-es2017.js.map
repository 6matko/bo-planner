{"version":3,"sources":["./angular/src/app/modules/options/options.facade.ts","./angular/src/app/modules/options/options.state.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAGuC;AACU;;;;AAQ1C,MAAM,aAAa;IAExB,YACU,SAA8B,EAC9B,YAA0B;QAD1B,cAAS,GAAT,SAAS,CAAqB;QAC9B,iBAAY,GAAZ,YAAY,CAAc;IAChC,CAAC;IAEL;;;;;;;OAOG;IACH,gBAAgB,CAAC,KAAe;;QAC9B,IAAI,KAAK,IAAI,CAAC,WAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,0CAAE,MAAM,GAAE;YAC5D,IAAI,CAAC,SAAS,CAAC,MAAM,CAAW,QAAQ,CAAC;iBACtC,IAAI,CACH,qDAAK,EAAE,CACR;iBACA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;SAC1D;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACH,mBAAmB,CAAC,MAAkB;QACpC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACH,WAAW;QACT,gFAAgF;QAChF,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YAC/B,MAAM,eAAe,GAAG,2DAAa,CAAC,QAAQ,CAAC,EAAE,WAAC,eAAQ,CAAC,UAAU,KAAK,CAAC,WAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,0CAAE,UAAU,KAAC,CAAC;YAClI,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;IACpC,CAAC;IAEO,WAAW,CAAC,QAAkB;QACpC,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACxC,CAAC;;0EArDU,aAAa;8GAAb,aAAa,WAAb,aAAa,mBAFZ,MAAM;;;;;;;;;;;;;;;;;;ACTmB;;AAOhC,MAAM,YAAY;IAevB;QAdA;;;;WAIG;QACH,mBAAc,GAAG,IAAI,iDAAe,CAAa,EAAE,CAAC,CAAC;IASrC,CAAC;;wEAfN,YAAY;6GAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM","file":"common-es2017.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NgxIndexedDBService } from 'ngx-indexed-db';\nimport { Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { CURRENCY } from '../../core/currencies';\nimport { Currency } from '../../models/base.model';\nimport { BuyOrder } from '../../models/buy-order.model';\nimport { OptionsState } from './options.state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OptionsFacade {\n\n  constructor(\n    private dbService: NgxIndexedDBService,\n    private optionsState: OptionsState,\n  ) { }\n\n  /**\n   * Method returns `Observable` with stored planned buy orders. If there are no planned orders\n   * then it will look for them in DB, store and return observable with buy orders\n   *\n   * @param {boolean} [force] Indicates if request to DB should be forced instead of using stored values\n   * @return {Observable<BuyOrder[]>} `Observable` with planned buy orders\n   * @memberof OptionsFacade\n   */\n  getPlannedOrders(force?: boolean): Observable<BuyOrder[]> {\n    if (force || !this.optionsState.plannedOrders$.value?.length) {\n      this.dbService.getAll<BuyOrder>('orders')\n        .pipe(\n          first(),\n        )\n        .subscribe(orders => this.updatePlannedOrders(orders));\n    }\n    return this.optionsState.plannedOrders$.asObservable();\n  }\n\n  /**\n   * Updates planned buy orders in state\n   *\n   * @param {BuyOrder[]} orders Orders to store\n   * @memberof OptionsFacade\n   */\n  updatePlannedOrders(orders: BuyOrder[]) {\n    this.optionsState.plannedOrders$.next(orders);\n  }\n\n  /**\n   * Method gets users currency based on first added planned order\n   *\n   * @return {Currency} Returns information about users currency\n   * @memberof OptionsFacade\n   */\n  getCurrency() {\n    // Checking if currency is stored in state. If not then trying to get and set it\n    if (!this.optionsState.currency) {\n      const currentCurrency = CURRENCY.find(currency => currency.currencyId === +this.optionsState.plannedOrders$.value[0]?.currencyId);\n      this.setCurrency(currentCurrency);\n    }\n    return this.optionsState.currency;\n  }\n\n  private setCurrency(currency: Currency) {\n    this.optionsState.currency = currency;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Currency } from '../../models/base.model';\nimport { BuyOrder } from '../../models/buy-order.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OptionsState {\n  /**\n   * Behavior Subject which stores planned orders\n   *\n   * @memberof OptionsState\n   */\n  plannedOrders$ = new BehaviorSubject<BuyOrder[]>([]);\n  /**\n   * Users currency\n   *\n   * @type {Currency}\n   * @memberof OptionsState\n   */\n  currency: Currency;\n\n  constructor() { }\n\n}\n"],"sourceRoot":"webpack:///"}